use std::marker::PhantomData;

use bellpepper_core::{num::AllocatedNum, boolean::AllocatedBit, ConstraintSystem, SynthesisError};
use ff::Field;
use nova_snark::traits::{circuit::StepCircuit, Group};
use num_bigint::BigUint;

use super::wrapper::StepCircuitWrapper;

#[derive(Clone, Debug)]
pub struct {{ rs_circuit_struct_name }}<G: Group> {
    _phantom: PhantomData<G>,
}

impl<G: Group> {{ rs_circuit_struct_name }}<G> {
    const ZERO: G::Scalar = G::Scalar::ZERO;
    const ONE: G::Scalar = G::Scalar::ONE;
}


impl<G: Group> StepCircuit<G::Scalar> for {{ rs_circuit_struct_name }}<G> {
    fn arity(&self) -> usize {
        {{ rs_arity }}
    }

    fn synthesize<CS: ConstraintSystem<G::Scalar>>(
        &self,
        cs: &mut CS,
        z: &[AllocatedNum<G::Scalar>],
    ) -> Result<Vec<AllocatedNum<G::Scalar>>, SynthesisError> {
        let mut z_out: Result<Vec<AllocatedNum<G::Scalar>>, SynthesisError> = Err(SynthesisError::AssignmentMissing);
        let mut nums: Vec<&AllocatedNum<G::Scalar>> = z.iter().collect::<Vec<_>>();

{{ rs_synthesize }}

        z_out = Ok(nums[{{ rs_first_output_idx }}..].to_vec()
            .into_iter()
            .map(|num| num.clone())
            .collect::<Vec<_>>()
        );
        z_out
    }
}

impl<G: Group> StepCircuitWrapper<G> for {{ rs_circuit_struct_name }}<G> {}
